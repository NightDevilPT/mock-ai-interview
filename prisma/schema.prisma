// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  MIXED
}

enum SessionStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AttemptStatus {
  STARTED
  COMPLETED
  EVALUATED
  ABANDONED
}

enum QuestionType {
  MULTIPLE_CHOICE
  CHECKBOX
  TEXT
  DROPDOWN
  RATING
  CODING
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
  LINKEDIN
}

model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  email          String             @unique
  password       String?
  firstName      String
  lastName       String
  avatar         String?
  bio            String?
  authProvider   AuthProvider       @default(EMAIL)
  isVerified     Boolean            @default(false)
  token          String?
  tokenExpired   DateTime?

  // Dashboard analytics
  totalSessionsCreated    Int      @default(0)
  totalAttempts          Int       @default(0)
  averageScore           Float?    @default(0)
  strongestDomain        String?
  improvementAreas       String[]
  lastActive             DateTime?

  // Relations
  createdSessions InterviewSession[]
  attempts       AttemptedSession[]
  responses      InterviewQuestionResponse[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email, isVerified])
}

model InterviewSession {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  careerLevel     String
  experience      String
  domain          String
  difficulty      Difficulty
  questionTypes   QuestionType[]
  focusAreas      String[]
  isPublic        Boolean              @default(false)
  shareToken      String?              @unique
  status          SessionStatus        @default(DRAFT)

  // Metadata
  estimatedDuration Int
  scoringCriteria  Json // { technical: number, behavioral: number }

  // Relations
  creator       User                 @relation(fields: [creatorId], references: [id])
  creatorId     String               @db.ObjectId
  questions     Question[]
  attempts      AttemptedSession[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([creatorId, isPublic, shareToken])
}

model Question {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  type            QuestionType
  category        String
  difficulty      Difficulty
  estimatedTime   Int                  @default(60) // seconds
  order           Int
  points          Int                  @default(10)
  options         Json?                // For MCQs: [{id: string, text: string}]
  constraints     Json?                // { minLength?: number, maxLength?: number }
  hints           String[]
  tags            String[]
  idealAnswer     String?

  // Relations
  session       InterviewSession     @relation(fields: [sessionId], references: [id])
  sessionId     String               @db.ObjectId
  responses     InterviewQuestionResponse[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([sessionId])
}

model AttemptedSession {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  status          AttemptStatus        @default(STARTED)
  score           Int?
  timeTaken       Int?                 // in seconds
  startedAt       DateTime             @default(now())
  completedAt     DateTime?

  // Relations
  originalSession InterviewSession     @relation(fields: [originalSessionId], references: [id])
  originalSessionId String             @db.ObjectId
  user           User                 @relation(fields: [userId], references: [id])
  userId         String               @db.ObjectId
  responses      InterviewQuestionResponse[]
  feedback       InterviewFeedback?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([originalSessionId, userId, status])
}

model InterviewQuestionResponse {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  answer          Json                 // Can be string, string[], or object
  score           Int?
  timeTaken       Int?                 // in seconds
  answeredAt      DateTime             @default(now())

  // Relations
  question      Question             @relation(fields: [questionId], references: [id])
  questionId    String               @db.ObjectId
  attempt       AttemptedSession     @relation(fields: [attemptId], references: [id])
  attemptId     String               @db.ObjectId
  user          User?                @relation(fields: [userId], references: [id])
  userId        String?              @db.ObjectId

  @@index([questionId, attemptId, userId])
}

model InterviewFeedback {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  overallScore        Int
  strengths           Json             // { id: string, title: string, description: string }[]
  improvementAreas    Json             // Same structure as strengths
  resources           Json             // { title: string, url: string }[]
  aiAnalysis          Json?
  motivationalSummary String

  // Relations
  attempt       AttemptedSession     @relation(fields: [attemptId], references: [id])
  attemptId     String               @db.ObjectId @unique

  createdAt     DateTime @default(now())
}