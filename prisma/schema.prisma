generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum CareerLevel {
  INTERN
  JUNIOR
  MID
  SENIOR
  LEAD
}

enum ExperienceLevel {
  LESS_THAN_1_YEAR
  ONE_TO_THREE_YEARS
  THREE_TO_FIVE_YEARS
  FIVE_TO_TEN_YEARS
  MORE_THAN_TEN_YEARS
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  MIXED
}

enum SessionStatus {
  DRAFT
  GENERATED
  IN_PROGRESS
  COMPLETED
  EVALUATED
}

enum AttemptStatus {
  STARTED
  COMPLETED
  EVALUATED
  ABANDONED
}

enum QuestionType {
  MULTIPLE_CHOICE
  CHECKBOX
  TEXT
  DROPDOWN
  RATING
  CODING
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
  LINKEDIN
}

model User {
  id                  String                      @id @default(auto()) @map("_id") @db.ObjectId
  email               String                      @unique
  password            String?
  firstName           String
  lastName            String
  avatar              String?
  bio                 String?
  authProvider        AuthProvider                @default(EMAIL)
  isVerified          Boolean                     @default(false)
  token               String?
  tokenExpired        DateTime?

  // Dashboard analytics
  totalSessionsCreated Int                       @default(0)
  totalAttempts       Int                        @default(0)
  averageScore        Float?                     @default(0)
  strongestDomain     String?
  improvementAreas    String[]
  lastActive          DateTime?

  // Relations
  createdSessions     InterviewSession[]
  attempts           AttemptedSession[]
  responses          InterviewQuestionResponse[]

  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt

  @@index([email, isVerified])
}

model InterviewSession {
  id                String                      @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  careerLevel       CareerLevel
  experience        ExperienceLevel
  domain            String
  difficulty        Difficulty
  questionTypes     QuestionType[]
  focusAreas        String[]
  isPublic          Boolean                     @default(false)
  shareToken        String?                     @unique
  status            SessionStatus               @default(DRAFT)
  totalQuestions    Int?
  totalPoints       Int?

  // Relations
  creator           User                        @relation(fields: [creatorId], references: [id])
  creatorId         String                      @db.ObjectId
  questions        Question[]
  attempts         AttemptedSession[]
  responses        InterviewQuestionResponse[]

  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt

  @@index([creatorId, status, isPublic])
}

model Question {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  
  // Content Fields (Enhanced)
  text              String            // Plain text fallback
  content           Json?             // Rich content 
  
  // Metadata
  type              QuestionType
  category          String?
  difficulty        Difficulty
  estimatedDuration Int               // in seconds
  order             Int?
  points            Int
  
  // Question Components
  options           String[]          // For MULTIPLE_CHOICE/CHECKBOX
  constraints       Json?          // Requirements/limitations { min:20, max:100 }
  hints             String[]          // Help text
  tags              String[]          // Classification
  
  // Relations
  session           InterviewSession  @relation(fields: [sessionId], references: [id])
  sessionId         String            @db.ObjectId
  responses         InterviewQuestionResponse[]
  attempts          AttemptedSession[] @relation(fields: [attemptIds], references: [id])
  attemptIds        String[]          @db.ObjectId
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Indexes
  @@index([sessionId, type, difficulty])
}

model InterviewQuestionResponse {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  aiAnswer                String
  userAnswer             String?
  userScore               Float?
  feedback                Json
  isCorrect               Boolean?
  improvementSuggestions  Json

  // Relations
  question               Question            @relation(fields: [questionId], references: [id])
  questionId            String              @db.ObjectId
  user                  User                @relation(fields: [userId], references: [id])
  userId                String              @db.ObjectId
  session              InterviewSession      @relation(fields: [sessionId], references: [id])
  sessionId           String              @db.ObjectId
  attempt             AttemptedSession      @relation(fields: [attemptId], references: [id])
  attemptId          String              @db.ObjectId

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@index([questionId, userId, sessionId, attemptId])
}

model AttemptedSession {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  status                  AttemptStatus       @default(STARTED)
  score                   Float?
  totalPoints             Int?
  totalQuestions          Int?
  startTime               DateTime
  endTime                 DateTime?
  totalDuration           Int?                // in seconds
  isPublic                Boolean             @default(false)
  shareToken              String?             @unique
  feedback                Json?
  improvementSuggestions  Json?

  // Relations
  session                InterviewSession    @relation(fields: [sessionId], references: [id])
  sessionId             String              @db.ObjectId
  user                  User                @relation(fields: [userId], references: [id])
  userId               String              @db.ObjectId
  questions            Question[]           @relation(fields: [questionIds], references: [id])
  questionIds         String[]             @db.ObjectId
  responses           InterviewQuestionResponse[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@index([sessionId, userId, status])
}