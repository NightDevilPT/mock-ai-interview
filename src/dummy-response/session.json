{
	"metadata": {
		"title": "Senior Backend Engineer Interview",
		"description": "Technical assessment for Node.js and microservices architecture",
		"careerLevel": "SENIOR",
		"experience": "FIVE_TO_TEN_YEARS",
		"domain": "Backend Development",
		"difficulty": "EASY",
		"questionTypes": ["MULTIPLE_CHOICE", "TEXT", "CODING"],
		"focusAreas": [
			"Node.js",
			"Microservices",
			"Database Optimization",
			"AWS"
		],
		"totalQuestions": 5,
		"totalPoints": 90,
		"estimatedDuration": 1110
	},
	"questions": [
		{
			"text": "Which of the following hooks is primarily used for managing side effects in React functional components?",
			"content": [],
			"type": "MULTIPLE_CHOICE",
			"category": "ReactJS",
			"difficulty": "MEDIUM",
			"estimatedDuration": 60,
			"points": 10,
			"order": 0,
			"options": ["useState", "useEffect", "useContext", "useReducer"],
			"correctOption": 1,
			"constraints": {
				"maxLength": 0,
				"minLength": 0
			},
			"hints": [],
			"tags": ["React", "Hooks", "Side Effects"],
			"idealAnswer": "The `useEffect` hook is used for side effects like data fetching, subscriptions, or manually changing the DOM in React functional components.",
			"scoringCriteria": [
				"Correctly identifies useEffect as the hook for side effects."
			]
		},
		{
			"text": "Create a simple React functional component that displays a counter. The component should have two buttons: one to increment the counter and one to decrement it. The counter should start at 0.",
			"content": [
				{
					"type": "paragraph",
					"data": {
						"text": "Implement the `Counter` component using React hooks. Ensure the component is a functional component and handles state correctly."
					},
					"order": 0
				},
				{
					"type": "code",
					"data": {
						"code": "import React, { useState } from 'react';\n\nconst Counter = () => {\n  // Your code here\n};\n\nexport default Counter;",
						"language": "javascript"
					},
					"order": 1
				}
			],
			"type": "CODING",
			"category": "ReactJS",
			"difficulty": "MEDIUM",
			"estimatedDuration": 450,
			"points": 50,
			"order": 1,
			"options": [],
			"correctOption": null,
			"constraints": {
				"maxLength": 2000,
				"minLength": 50,
				"timeLimit": 600
			},
			"hints": [
				"Consider using the `useState` hook for state management.",
				"Ensure your buttons have `onClick` handlers to update the state."
			],
			"tags": ["React", "Hooks", "State Management", "Component"],
			"idealAnswer": "A React functional component using `useState` to manage a counter, with increment and decrement buttons that update the counter's state.",
			"scoringCriteria": [
				"Correct use of `useState` for counter state.",
				"Buttons correctly increment and decrement the counter.",
				"Component renders the current count.",
				"Code is clean and readable."
			]
		},
		{
			"text": "Which core Node.js module is primarily used for building HTTP servers and clients?",
			"content": [],
			"type": "MULTIPLE_CHOICE",
			"category": "Nodejs",
			"difficulty": "EASY",
			"estimatedDuration": 45,
			"points": 10,
			"order": 2,
			"options": ["fs", "path", "http", "url"],
			"correctOption": 2,
			"constraints": {
				"maxLength": 0,
				"minLength": 0
			},
			"hints": [],
			"tags": ["Node.js", "Core Modules", "HTTP"],
			"idealAnswer": "The `http` module is the core Node.js module for building HTTP servers and clients.",
			"scoringCriteria": ["Correctly identifies the `http` module."]
		},
		{
			"text": "Write a Node.js script that reads a file named `data.txt` asynchronously and prints its content to the console. If the file does not exist, it should print an appropriate error message.",
			"content": [
				{
					"type": "paragraph",
					"data": {
						"text": "Use the built-in `fs` module for file operations. Ensure proper error handling, especially for the 'file not found' scenario."
					},
					"order": 0
				},
				{
					"type": "code",
					"data": {
						"code": "const fs = require('fs');\nconst fileName = 'data.txt';\n\n// Your code here",
						"language": "javascript"
					},
					"order": 1
				}
			],
			"type": "CODING",
			"category": "Nodejs",
			"difficulty": "MEDIUM",
			"estimatedDuration": 600,
			"points": 60,
			"order": 3,
			"options": [],
			"correctOption": null,
			"constraints": {
				"maxLength": 2500,
				"minLength": 70,
				"timeLimit": 720
			},
			"hints": [
				"Look into `fs.readFile` or `fs.promises.readFile` for asynchronous file reading.",
				"Remember to handle the error object in the callback or catch block for robust error handling."
			],
			"tags": [
				"Node.js",
				"File System",
				"Asynchronous",
				"Error Handling"
			],
			"idealAnswer": "A Node.js script using `fs.readFile` with a callback or `fs.promises.readFile` with `async/await` to read a file, including error handling for file not found.",
			"scoringCriteria": [
				"Correctly uses `fs.readFile` (or promise equivalent).",
				"Prints file content to console on success.",
				"Handles file not found error gracefully.",
				"Code is asynchronous and robust."
			]
		},
		{
			"text": "Explain the concept of Server-Side Rendering (SSR) in Next.js and describe a scenario where you would prefer SSR over Client-Side Rendering (CSR).",
			"content": [],
			"type": "TEXT",
			"category": "NextJS",
			"difficulty": "HARD",
			"estimatedDuration": 240,
			"points": 30,
			"order": 4,
			"options": [],
			"correctOption": null,
			"constraints": {
				"maxLength": 800,
				"minLength": 100
			},
			"hints": [
				"Consider the benefits for SEO and initial page load performance.",
				"Think about data fetching strategies and user experience for different types of applications."
			],
			"tags": ["Next.js", "SSR", "CSR", "Rendering"],
			"idealAnswer": "SSR in Next.js means pages are rendered on the server before being sent to the client, resulting in a fully formed HTML page. This improves initial load time and SEO because search engine crawlers can easily index the content. A scenario where SSR is preferred over CSR is for public-facing content-heavy websites like e-commerce stores or news blogs, where SEO is crucial and users need to see content quickly without waiting for client-side JavaScript to load and fetch data.",
			"scoringCriteria": [
				"Provides a clear and accurate definition of SSR.",
				"Explains key advantages of SSR (e.g., SEO, initial load performance).",
				"Presents a relevant and well-justified scenario for choosing SSR over CSR."
			]
		}
	]
}
